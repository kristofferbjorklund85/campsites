package com.example.sombra.camps;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Geocoder;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The core functionality of the app. We use the Google Maps API to create a map, populate it with
 * markers generated from our campsiteModel objects. We also have a search function and a lot of code
 * to handle different conditions being present to make a smooth as possible user experience.
 */
public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {
    private static final int FINE_LOCATION_PERMISSION_REQUEST = 1;
    private static GoogleMap mMap;

    private static ArrayList<Marker> markerList = new ArrayList<>();
    private List<CampsiteModel> cml;

    private boolean mLocationPermissionGranted = false;

    private static CampsiteModel newCM = null;
    private static Marker deleteM = null;
    private static boolean markerDelete = false;

    private LatLng defaultLatLng = new LatLng(57.850894, 12.033463);
    private int defaultZoom = 7;

    /**
     * onCreate() sets the view for the activity.
     * It also creates a support fragment containing the map layout.
     *
     * Finally it retrives the map from getMapAsync() and loading it when it is finished.
     *
     * @param savedInstanceState The standard Bundle from previous class.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_maps);

        SupportMapFragment mapFragment = (SupportMapFragment) this.getSupportFragmentManager()
                .findFragmentById(R.id.map);

        mapFragment.getMapAsync(this);
    }

    /**
     * onResume() checks wether a new campsite has been added or not.
     * If a new campsite has been created a new marker is generated.
     * If the user cancels the creation process the empty marker is removed.
     */
    @Override
    public void onResume() {
        super.onResume();
        if(newCM != null) {
            createMarker(newCM);
            newCM = null;
        }
        if (markerDelete == true && deleteM != null) {
            deleteM.remove();
            markerDelete = false;
        }
    }

    /**
     * If the back button is pressed while a new marker is being created but the campsite
     * creation acitivty has not, the marker is removed.
     * Otherwise the {@link MapsActivity} is switched to {@link LandingActivity}.
     */
    @Override
    public void onBackPressed() {
        if (!markerList.isEmpty()) {
            markerList.get(0).remove();
            markerList.remove(0);
        } else {
            Intent intent = new Intent(MapsActivity.this, LandingActivity.class);
            startActivity(intent);
            finish();
        }
    }

    /**
     * onMapReady() assigns the googleMap to the local activity map and setting the
     * {@link com.google.android.gms.maps.GoogleMap.InfoWindowAdapter}.
     * {@link #updateLocationUI()} is used to access the users position
     * and enabling the 'center-on-user' button.
     *
     * The campsiteList sent from {@link LandingActivity} is then retrieved and markers are generated by
     * {@link #createMarker(CampsiteModel)}.
     *
     * After the markers are generated the camera is moved to our default position and default zoom.
     *
     * Finally three listeners for OnInfoWindowClickListener, OnMapClickListener and OnMarkerClickListener.
     *
     * @param googleMap Google Map to be used in the MapsActivity.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        mMap.setInfoWindowAdapter(new MyInfoWindowAdapter());

        updateLocationUI();

        Bundle extras = getIntent().getExtras();
        if (extras == null) {
            return;
        }

        cml = extras.getParcelableArrayList("cmList");

        createMarker(cml);

        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(defaultLatLng, defaultZoom));

        /* Checks wether the InfoWind is from a new campsite or an already existing one.
           Depending on the InfoWindow the corresponding Activity is then started.
        */
        mMap.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {
            @Override
            public void onInfoWindowClick(Marker marker) {
                if (marker.getTitle().equals("Create new Campsite")) {
                    Intent intent = new Intent(MapsActivity.this, PostActivity.class);
                    intent.putExtra("latlng", marker.getPosition());
                    startActivity(intent);
                    marker.remove();
                } else {
                    deleteM = marker;
                    Intent intent = new Intent(MapsActivity.this, CampsiteActivity.class);
                    intent.putExtra("cm", (CampsiteModel) marker.getTag());
                    marker.hideInfoWindow();
                    startActivity(intent);
                }
            }
        });
        /* Checks wether the user is logged in or not when clicking on the map.
           If used as a 'guest' the user is prompted to log in,
           oterhwise a create campsite InfoWindow is activated.
        */
        mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {
            @Override
            public void onMapClick(LatLng point) {
                if(!LoginActivity.promptLogin("create a campsite", MapsActivity.this)) {
                    if (!markerList.isEmpty()) {
                        markerList.get(0).remove();
                        markerList.remove(0);
                    }
                    Marker m = mMap.addMarker(new MarkerOptions()
                            .position(point)
                            .title("Create new Campsite")
                            .snippet(""));

                    markerList.add(m);
                    m.showInfoWindow();
                }
            }
        });

        /* Checks wether a marker is already on the map or not.
           If no other marker is active a marker will be activated.
           But if there already is a marker that marker will be removed.
        */
        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
            @Override
            public boolean onMarkerClick(Marker marker) {
                if (markerList.size() != 0 && marker != markerList.get(0)) {
                    markerList.get(0).remove();
                }
                marker.showInfoWindow();
                return true;
            }
        });
    }

    /**
     * createMarker() populates the map with markers from our campsiteList.
     * The title is the name of the campsite, and the snipped contains fee and type.
     * We also set the campsite as a tag to be used in the {@link CampsiteActivity}.
     *
     * @param list List that contains the campsites to generate markers from.
     */
    private static void createMarker(List<CampsiteModel> list) {
        for (CampsiteModel cm : list) {
            Marker m = mMap.addMarker(new MarkerOptions()
                    .position(new LatLng(cm.lat, cm.lng))
                    .title(cm.name)
                    .snippet(cm.fee + "-" + cm.type));
            m.setTag(cm);
        }
    }

    /**
     * Same method as {@link #createMarker(List)} but only taking a single {@link CampsiteModel} as argument.
     * Used when generating marker from a newly created campsite.
     *
     * @param cm CampsiteModel to be used to generate a single marker.
     */
    private static void createMarker(CampsiteModel cm) {
        Marker m = mMap.addMarker(new MarkerOptions()
                    .position(new LatLng(cm.lat, cm.lng))
                    .title(cm.name)
                    .snippet(cm.fee + "-" + cm.type));
            m.setTag(cm);
    }

    /**
     * onSearch() is used to search locations on the map.
     * It uses {@link Geocoder} to get the location name from the search text.
     *
     * After a succesful search it moves the camera to the new position.
     *
     * @param view Needed for onClick() usage.
     */
    public void onSearch(View view) {
        EditText location_tf = (EditText) findViewById(R.id.TFaddress);
        String location = location_tf.getText().toString();
        List<Address> addressList = null;

        if (Utils.checkString(location, "Search field", 0, 0)) {
            Geocoder gc = new Geocoder(this);
            try {
                addressList = gc.getFromLocationName(location, 1);
                if(addressList.isEmpty()) {
                    Utils.toast("That place doesn't exist", "short");
                    return;
                }
            } catch (IOException | IllegalStateException | IllegalArgumentException e) {
                Utils.toast("That place doesn't exist", "short");
                return;
            }

            Address address = addressList.get(0);
            LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());

            mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));
            mMap.moveCamera(CameraUpdateFactory.zoomTo(7));
            InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
        }
    }

    /**
     * getLocationPermission() check wether the user has allowed the app to access its location.
     * If access has not previously been allowed it prompts a access request through {@link #requestPermissions(String[], int)},
     * otherwise location permission is set to true and {@link #updateLocationUI()} is called.
     */
    public void getLocationPermission() {
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                    FINE_LOCATION_PERMISSION_REQUEST);
        } else {
            mLocationPermissionGranted = true;
            updateLocationUI();
        }
    }

    /**
     * onRequestPermissionsResult() ask the user for access to user location. If allowed permission is
     * set to true and {@link #updateLocationUI()} is called.
     *
     * If access is denied the user is moved back to the {@link LandingActivity} and told that
     * user location need to be enabled for maps functionality.
     *
     * @param requestCode  The type of request made by the app.
     * @param permissions  Not used by the method, but note that this whole method is copied from Googles API so we won't change it.
     * @param grantResults Contains the result from the user request.
     */
    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String permissions[],
                                           @NonNull int[] grantResults) {
        mLocationPermissionGranted = false;
        switch (requestCode) {
            case FINE_LOCATION_PERMISSION_REQUEST: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    mLocationPermissionGranted = true;
                } else {
                    Intent intent = new Intent(MapsActivity.this, LandingActivity.class);
                    startActivity(intent);
                    finish();
                    Utils.toast("You need to allow user location to use the maps functionality", "long");
                }
            }
        }
        updateLocationUI();
    }

    /**
     * updateLocationUI() is the last step in enabling user location.
     * It checks wether or not the user has granted permission to access its location.
     * If allowed it will set Location to enabled and the map will run.
     * If not allowed it will start the whole permission request procss by calling {@link #getLocationPermission()}.
     */
    void updateLocationUI() {
        if (mMap == null) {
            return;
        }
        try {
            if (mLocationPermissionGranted) {
                mMap.setMyLocationEnabled(true);
            } else {
                mMap.setMyLocationEnabled(false);
                getLocationPermission();
            }
        } catch (SecurityException e)  {
            Log.e("Exception: %s", e.getMessage());
        }
    }

    /**
     * setNewCM() sets a newly created campsite to the local variable newCM.
     * newCM is used to generate a marker for the new campsite without needing to do
     * a database call.
     *
     * @param cm CampsiteModel to generate a marker from.
     */
    public static void setNewCM(CampsiteModel cm) {
        newCM = cm;
    }

    /**
     * setDeleteM() is to be able to delete a marker that was created for a new campsite but the
     * create campsite process was cancelled. Tracks wether the last used marker is to be deleted.
     */
    public static void setDeleteM() {
        markerDelete = true;
    }

    /**
     * Our own custom made InfoWindowAdapter to be able to style the info window further than what
     * google maps allow by defualt.
     *
     * Not really complex in any way but still more complex than the standard info window.
     */
    class MyInfoWindowAdapter implements GoogleMap.InfoWindowAdapter {

        private final View myContentsView;

        MyInfoWindowAdapter() {
            myContentsView = getLayoutInflater().inflate(R.layout.custom_info_window, null);
        }

        // Sets the text and style of our info window.
        @Override
        public View getInfoContents(Marker marker) {

            TextView tvTitle = ((TextView)myContentsView.findViewById(R.id.title));
            tvTitle.setText(marker.getTitle());
            TextView tvFee = (TextView) myContentsView.findViewById(R.id.fee);
            TextView tvType = (TextView) myContentsView.findViewById(R.id.type);
            if(marker.getSnippet() != null && !marker.getSnippet().equals("")) {
                tvFee.setVisibility(View.VISIBLE);
                tvType.setVisibility(View.VISIBLE);
                String[]splitString = marker.getSnippet().split("-");
                tvFee.setText("Fee: " + splitString[0]);
                tvType.setText("Type: " + splitString[1]);
            } else {
                tvFee.setVisibility(View.GONE);
                tvType.setVisibility(View.GONE);
            }

            return myContentsView;
        }

        @Override
        public View getInfoWindow(Marker marker) {
            // TODO Auto-generated method stub
            return null;
        }
    }
}
